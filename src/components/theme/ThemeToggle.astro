---
// Theme toggle component for switching between light and dark mode
---

<button
  id="theme-toggle"
  class="inline-flex items-center justify-center p-2 rounded-lg transition-colors duration-200 hover:bg-base-100 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-offset-2"
  aria-label="Cambiar tema"
  title="Cambiar entre modo claro y oscuro"
>
  <!-- Sun icon for light mode -->
  <svg
    id="sun-icon"
    class="w-5 h-5 text-base-600 transition-opacity duration-200"
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
    ></path>
  </svg>

  <!-- Moon icon for dark mode -->
  <svg
    id="moon-icon"
    class="w-5 h-5 text-base-600 transition-opacity duration-200 hidden"
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
    ></path>
  </svg>
</button>

<script>
  // Theme management script
  class ThemeManager {
    constructor() {
      this.button = document.getElementById('theme-toggle');
      this.sunIcon = document.getElementById('sun-icon');
      this.moonIcon = document.getElementById('moon-icon');

      this.init();
    }

    init() {
      // Get initial theme from localStorage or system preference
      const savedTheme = localStorage.getItem('theme');
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      const currentTheme = savedTheme || systemTheme;

      // Apply initial theme
      this.setTheme(currentTheme);

      // Add click event listener
      this.button?.addEventListener('click', () => this.toggleTheme());

      // Listen for system theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        if (!localStorage.getItem('theme')) {
          this.setTheme(e.matches ? 'dark' : 'light');
        }
      });
    }

    setTheme(theme) {
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
        this.sunIcon?.classList.add('hidden');
        this.moonIcon?.classList.remove('hidden');
      } else {
        document.documentElement.classList.remove('dark');
        this.sunIcon?.classList.remove('hidden');
        this.moonIcon?.classList.add('hidden');
      }

      localStorage.setItem('theme', theme);
    }

    toggleTheme() {
      const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      this.setTheme(newTheme);
    }
  }

  // Initialize theme manager when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ThemeManager();
  });

  // Also run immediately in case DOM is already loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ThemeManager());
  } else {
    new ThemeManager();
  }
</script>