---
import BaseLayout from "../../layouts/BaseLayout.astro";
---

<BaseLayout>
  <section class="py-20 bg-base-25">
    <div class="max-w-7xl mx-auto px-8 md:px-12 lg:px-24">
      <!-- Hero Section -->
      <div class="text-center mb-16">
        <div class="inline-flex items-center gap-2 px-4 py-2 bg-accent-100 text-accent-700 rounded-full text-sm font-medium mb-6">
          <span class="text-2xl">📅</span>
          Gestor de Citas IA
        </div>
        <h1 class="text-4xl md:text-5xl font-bold text-base-900 mb-6">
          Reservas automáticas <span class="text-accent-600">24/7</span>
        </h1>
        <p class="text-xl text-base-600 max-w-3xl mx-auto mb-8">
          Tu asistente virtual gestiona citas, confirmaciones y recordatorios automáticamente.
          Sin llamadas, sin esperas, sin complicaciones.
        </p>
        <div class="inline-flex items-center gap-2 px-4 py-2 bg-green-50 text-green-700 rounded-lg text-sm font-medium">
          <span class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></span>
          Demo interactiva disponible abajo
        </div>
      </div>

      <!-- Interactive Demo Section -->
      <div class="mb-16">
        <div class="max-w-5xl mx-auto">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Calendar View -->
            <div class="bg-white rounded-2xl shadow-xl overflow-hidden">
              <div class="bg-gradient-to-r from-accent-600 to-blue-600 px-6 py-4 text-white">
                <h3 class="text-lg font-semibold">Calendario de Disponibilidad</h3>
                <p class="text-sm opacity-90">Clínica Dental - Dr. García</p>
              </div>

              <div class="p-6">
                <!-- Calendar Header -->
                <div class="flex items-center justify-between mb-6">
                  <button class="p-2 hover:bg-base-100 rounded-lg transition-colors">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                    </svg>
                  </button>
                  <h4 class="text-lg font-semibold text-base-900">Enero 2025</h4>
                  <button class="p-2 hover:bg-base-100 rounded-lg transition-colors">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                  </button>
                </div>

                <!-- Calendar Grid -->
                <div class="grid grid-cols-7 gap-2 mb-4">
                  {['L', 'M', 'X', 'J', 'V', 'S', 'D'].map(day => (
                    <div class="text-center text-sm font-medium text-base-500">{day}</div>
                  ))}
                </div>

                <div class="grid grid-cols-7 gap-2" id="calendar-grid">
                  <!-- Calendar days will be generated by JS -->
                </div>

                <!-- Time Slots -->
                <div class="mt-6 pt-6 border-t border-base-200">
                  <h5 class="text-sm font-semibold text-base-900 mb-3">Horarios disponibles</h5>
                  <div class="grid grid-cols-3 gap-2" id="time-slots">
                    <button class="time-slot px-3 py-2 border border-base-300 rounded-lg hover:border-accent-500 hover:bg-accent-50 transition-all text-sm font-medium">
                      09:00
                    </button>
                    <button class="time-slot px-3 py-2 border border-base-300 rounded-lg hover:border-accent-500 hover:bg-accent-50 transition-all text-sm font-medium">
                      10:00
                    </button>
                    <button class="time-slot px-3 py-2 border border-base-300 rounded-lg hover:border-accent-500 hover:bg-accent-50 transition-all text-sm font-medium">
                      11:00
                    </button>
                    <button class="time-slot px-3 py-2 border border-base-300 rounded-lg hover:border-accent-500 hover:bg-accent-50 transition-all text-sm font-medium">
                      12:00
                    </button>
                    <button class="time-slot px-3 py-2 border border-base-300 rounded-lg hover:border-accent-500 hover:bg-accent-50 transition-all text-sm font-medium">
                      16:00
                    </button>
                    <button class="time-slot px-3 py-2 border border-base-300 rounded-lg hover:border-accent-500 hover:bg-accent-50 transition-all text-sm font-medium">
                      17:00
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <!-- Booking Form -->
            <div class="bg-white rounded-2xl shadow-xl overflow-hidden">
              <div class="bg-gradient-to-r from-blue-600 to-purple-600 px-6 py-4 text-white">
                <h3 class="text-lg font-semibold">Reservar Cita</h3>
                <p class="text-sm opacity-90">Completa tus datos</p>
              </div>

              <div class="p-6">
                <form id="booking-form" class="space-y-4">
                  <div>
                    <label class="block text-sm font-medium text-base-700 mb-2">Nombre completo</label>
                    <input
                      type="text"
                      placeholder="Juan Pérez"
                      class="w-full px-4 py-3 border border-base-300 rounded-lg focus:ring-2 focus:ring-accent-500 focus:border-accent-500"
                    />
                  </div>

                  <div>
                    <label class="block text-sm font-medium text-base-700 mb-2">Email</label>
                    <input
                      type="email"
                      placeholder="juan@ejemplo.com"
                      class="w-full px-4 py-3 border border-base-300 rounded-lg focus:ring-2 focus:ring-accent-500 focus:border-accent-500"
                    />
                  </div>

                  <div>
                    <label class="block text-sm font-medium text-base-700 mb-2">Teléfono</label>
                    <input
                      type="tel"
                      placeholder="+34 600 000 000"
                      class="w-full px-4 py-3 border border-base-300 rounded-lg focus:ring-2 focus:ring-accent-500 focus:border-accent-500"
                    />
                  </div>

                  <div>
                    <label class="block text-sm font-medium text-base-700 mb-2">Tipo de servicio</label>
                    <select class="w-full px-4 py-3 border border-base-300 rounded-lg focus:ring-2 focus:ring-accent-500 focus:border-accent-500">
                      <option>Limpieza dental</option>
                      <option>Revisión general</option>
                      <option>Ortodoncia</option>
                      <option>Endodoncia</option>
                      <option>Primera consulta</option>
                    </select>
                  </div>

                  <div>
                    <label class="block text-sm font-medium text-base-700 mb-2">Notas adicionales</label>
                    <textarea
                      rows="3"
                      placeholder="Información adicional..."
                      class="w-full px-4 py-3 border border-base-300 rounded-lg focus:ring-2 focus:ring-accent-500 focus:border-accent-500"
                    ></textarea>
                  </div>

                  <div id="selected-slot" class="hidden p-4 bg-green-50 border border-green-200 rounded-lg">
                    <div class="flex items-center gap-2 text-green-800 text-sm font-medium">
                      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                      </svg>
                      <span id="selected-slot-text"></span>
                    </div>
                  </div>

                  <button
                    type="submit"
                    class="w-full px-6 py-4 bg-gradient-to-r from-accent-600 to-blue-600 text-white rounded-xl font-semibold hover:from-accent-700 hover:to-blue-700 transition-all duration-200 shadow-lg hover:shadow-xl"
                  >
                    Confirmar Reserva
                  </button>
                </form>

                <div id="booking-success" class="hidden mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
                  <div class="text-center">
                    <div class="text-4xl mb-2">✅</div>
                    <h4 class="text-lg font-semibold text-green-800 mb-1">¡Cita confirmada!</h4>
                    <p class="text-sm text-green-600">Recibirás un email de confirmación y un recordatorio 24h antes</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Features Grid -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
        <div class="bg-base-50 rounded-xl p-6">
          <div class="w-12 h-12 bg-accent-100 rounded-lg flex items-center justify-center text-accent-600 text-xl mb-4">
            🔄
          </div>
          <h3 class="text-lg font-semibold text-base-900 mb-3">Sincronización Automática</h3>
          <p class="text-base-600">
            Integración con Google Calendar, Outlook y otros calendarios populares.
          </p>
        </div>

        <div class="bg-base-50 rounded-xl p-6">
          <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center text-blue-600 text-xl mb-4">
            📧
          </div>
          <h3 class="text-lg font-semibold text-base-900 mb-3">Recordatorios Inteligentes</h3>
          <p class="text-base-600">
            Email y SMS automáticos de confirmación, recordatorio y seguimiento.
          </p>
        </div>

        <div class="bg-base-50 rounded-xl p-6">
          <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center text-green-600 text-xl mb-4">
            ⏰
          </div>
          <h3 class="text-lg font-semibold text-base-900 mb-3">Disponibilidad 24/7</h3>
          <p class="text-base-600">
            Tus clientes pueden reservar a cualquier hora, sin necesidad de llamar.
          </p>
        </div>
      </div>

      <!-- CTA Section -->
      <div class="text-center bg-gradient-to-br from-accent-600 to-blue-600 rounded-2xl p-12 text-white">
        <h2 class="text-3xl font-bold mb-4">
          Reduce llamadas y mejora la experiencia de tus clientes
        </h2>
        <p class="text-xl mb-8 max-w-2xl mx-auto opacity-90">
          Implementa nuestro sistema de citas en tu negocio
        </p>
        <a
          href="/reunion"
          class="inline-flex items-center justify-center px-8 py-4 text-lg font-semibold text-accent-600 bg-white hover:bg-base-50 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200"
        >
          Solicitar Demo Gratuita
        </a>
      </div>
    </div>
  </section>
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const calendarGrid = document.getElementById('calendar-grid');
    const timeSlots = document.querySelectorAll('.time-slot');
    const selectedSlotDiv = document.getElementById('selected-slot');
    const selectedSlotText = document.getElementById('selected-slot-text');
    const bookingForm = document.getElementById('booking-form') as HTMLFormElement;
    const bookingSuccess = document.getElementById('booking-success');

    let selectedDay: number | null = null;
    let selectedTime: string | null = null;

    // Generate calendar
    function generateCalendar() {
      if (!calendarGrid) return;

      const today = new Date();
      const currentMonth = today.getMonth();
      const currentYear = today.getFullYear();
      const firstDay = new Date(currentYear, currentMonth, 1).getDay();
      const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();

      // Add empty cells for days before month starts
      for (let i = 0; i < (firstDay === 0 ? 6 : firstDay - 1); i++) {
        const emptyDay = document.createElement('div');
        calendarGrid.appendChild(emptyDay);
      }

      // Add days
      for (let day = 1; day <= daysInMonth; day++) {
        const dayButton = document.createElement('button');
        dayButton.type = 'button';
        dayButton.textContent = day.toString();
        dayButton.className = 'aspect-square p-2 rounded-lg text-sm font-medium transition-all';

        const isPast = day < today.getDate();
        const isToday = day === today.getDate();

        if (isPast) {
          dayButton.className += ' text-base-400 cursor-not-allowed';
          dayButton.disabled = true;
        } else if (isToday) {
          dayButton.className += ' bg-accent-100 text-accent-700 hover:bg-accent-200';
        } else {
          dayButton.className += ' text-base-700 hover:bg-accent-50 hover:text-accent-600';
        }

        dayButton.addEventListener('click', () => selectDay(day, dayButton));
        calendarGrid.appendChild(dayButton);
      }
    }

    function selectDay(day: number, button: HTMLButtonElement) {
      // Remove previous selection
      document.querySelectorAll('#calendar-grid button').forEach(btn => {
        btn.classList.remove('bg-accent-600', 'text-white');
      });

      // Add new selection
      button.classList.add('bg-accent-600', 'text-white');
      selectedDay = day;
      updateSelectedSlot();
    }

    // Handle time slot selection
    timeSlots.forEach(slot => {
      slot.addEventListener('click', (e) => {
        const button = e.currentTarget as HTMLButtonElement;

        // Remove previous selection
        timeSlots.forEach(s => {
          s.classList.remove('bg-accent-600', 'text-white', 'border-accent-600');
        });

        // Add new selection
        button.classList.add('bg-accent-600', 'text-white', 'border-accent-600');
        selectedTime = button.textContent?.trim() || null;
        updateSelectedSlot();
      });
    });

    function updateSelectedSlot() {
      if (selectedDay && selectedTime && selectedSlotDiv && selectedSlotText) {
        selectedSlotDiv.classList.remove('hidden');
        selectedSlotText.textContent = `Cita seleccionada: ${selectedDay} de Enero, ${selectedTime}`;
      }
    }

    // Handle form submission
    if (bookingForm) {
      bookingForm.addEventListener('submit', (e) => {
        e.preventDefault();

        if (!selectedDay || !selectedTime) {
          alert('Por favor selecciona un día y hora');
          return;
        }

        bookingForm.classList.add('hidden');
        if (bookingSuccess) {
          bookingSuccess.classList.remove('hidden');
        }
      });
    }

    generateCalendar();
  });
</script>